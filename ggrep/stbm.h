/************************************************************************/
/*                                                                      */
/*      STBM -- Self-Tuning Boyer-Moore string search                   */
/*                                                                      */
/*      Implements behoffski's variant of the Boyer-Moore search.       */
/*      This version was [re-?]invented after contemplating the         */
/*      1977 BM paper and the 1980 Sunday paper... but before           */
/*      behoffski knew of the 1991 Hume and Sunday paper.               */
/*                                                                      */
/*      There are two essential differences between this algorithm      */
/*      and the one used in GNU Grep:                                   */
/*         1. GNU Grep uses the "Tuned Boyer-Moore" algorithm           */
/*            as suggested by Hume and Sunday's 1991 paper.             */
/*            This version uses a *Self*-Tuning BM algorithm.           */
/*         2. GNU Grep handles case insensitivity by adding a           */
/*            general-purpose translation table that maps each          */
/*            byte before being examined by the search.  As             */
/*            already demonstrated by Grouse Grep's state tables,       */
/*            this is inefficient if the translation is static,         */
/*            as the extra lookup per character can be eliminated       */
/*            by modifying the state tables to reflect the effects      */
/*            of the translation.                                       */
/*                                                                      */
/*      So what is the Self-Tuning Boyer-Moore algorithm?  Like         */
/*      most BM algorithms, it has a skip loop, a guard test,           */
/*      and a match loop.  The critical difference is that we           */
/*      feed information from the match loop back into the guard        */
/*      test so that we can find the most effective guard.  This        */
/*      dynamic feedback costs us little or nothing to implement,       */
/*      yet can substantially improve the search efficiency.            */
/*      This dynamic feedback is more effective than a static           */
/*      guard as we tune ourselves to the actual data, instead of       */
/*      relying on some guess about the likely nature of the input.     */
/*                                                                      */
/*      The feedback is simple and cheap -- we remember the             */
/*      offset where the match loop detected a mismatch, and use        */
/*      that position as the guard!  In addition, we impose a           */
/*      round-robin ordering on the match loop, so that each            */
/*      position of the search string has an equal opportunity          */
/*      to become the guard.  We must pay the cost of setting up        */
/*      two loops when matching instead of just one, but this           */
/*      effort is more than repaid if (usually) we find a good          */
/*      guard.  To some extent, the performance of this code will       */
/*      depend on the characteristics of the code generated by          */
/*      the compiler.  This initial version was written and             */
/*      evaluated using GCC.                                            */
/*                                                                      */
/*      Note also that the correct probability function for the         */
/*      guard is conditional on the success of the BM skip              */
/*      search -- so, for example, when searching for "tree"            */
/*      in /usr/dict/words, the best guard character (the               */
/*      character least likely to match) -- given that the skip         */
/*      loop has matched an "e" -- is in fact the preceding "e",        */
/*      despite it being the most common letter in the file.            */
/*      Most static guess algorithms don't take this conditional        */
/*      probability into account: The self-tuning BM search gets        */
/*      it right as all the operations on the guard that affect         */
/*      its mismatch efficiency occur in the context where the          */
/*      last character has already matched.                             */
/*                                                                      */
/*      References:                                                     */
/*          "A Fast String Searching Algorithm"                         */
/*          Robert S. Boyer & J Strother Moore                          */
/*          Communications of the ACM                                   */
/*          Vol. 20 No. 10, October 1977 pp. 762-772                    */
/*                                                                      */
/*          "A Very Fast Substring Search Algorithm"                    */
/*          Daniel M. Sunday                                            */
/*          Communications of the ACM                                   */
/*          Vol. 33 No. 8, August 1990, pp. 132-142                     */
/*                                                                      */
/*          "Fast String Searching"                                     */
/*          Andrew Hume & Daniel Sunday                                 */
/*          Software - Practice & Experience                            */
/*          Vol. 21(11), 1221-1248 (November 1991)                      */
/*                                                                      */
/*      Copyright (C) 1998-2000 Grouse Software.  All rights reserved.  */
/*      Written for Grouse by behoffski (Brenton Hoff).                 */
/*                                                                      */
/*      Free software: no warranty; use anywhere is ok; spread the      */
/*      sources; note any mods; share variations and derivatives        */
/*      (including sending to behoffski@grouse.com.au).                 */
/*                                                                      */
/************************************************************************/

#ifndef STBM_H
#define STBM_H

#include <compdef.h>
#include <limits.h>

#ifdef __cplusplus
extern "C" {
#endif /*__cplusplus*/
        
#define STBM_ALPHABET_SIZE              (UCHAR_MAX + 1)

/*Flags for tailoring search behaviour*/
#define STBM_SEARCH_CASE_INSENSITIVE    BIT0

typedef struct STBM_SearchSpec_Struct STBM_SearchSpec;


/************************************************************************/
/*                                                                      */
/*      Init -- Prepare module for operation                            */
/*                                                                      */
/************************************************************************/
void
STBM_Init(void);


/************************************************************************/
/*                                                                      */
/*      Compile -- Analyse pattern and prepare for search               */
/*                                                                      */
/*      Converts the pattern string into a format optimal for           */
/*      the Search function, and returns the compiled format            */
/*      as a reference to use in subsequent searches.                   */
/*                                                                      */
/*      The caller must maintain the pattern string provided here       */
/*      for the duration of the search, as this function does not       */
/*      bother to take its own copy.                                    */
/*                                                                      */
/*      Returns FALSE if unable to handle pattern (probably             */
/*      due to insufficient memory).                                    */
/*                                                                      */
/************************************************************************/
BOOL
STBM_Compile(UINT PatLen, CHAR *pPattern, LWORD Flags, 
             STBM_SearchSpec **ppSpec);

/************************************************************************/
/*                                                                      */
/*      Search -- Report first occurrence of pattern in buffer          */
/*                                                                      */
/************************************************************************/
int
STBM_Search(STBM_SearchSpec *pSpec, 
            CHAR *pBuffer, UINT BufferLength, CHAR **match);


/************************************************************************/
/*                                                                      */
/*      SearchCI -- Search for pattern in buffer (case insensitive)     */
/*                                                                      */
/************************************************************************/
int
STBM_SearchCI(STBM_SearchSpec *pSpec, 
            CHAR *pBuffer, UINT BufferLength, CHAR **match);


/************************************************************************/
/*                                                                      */
/*      SearchTBM -- Search using Tuned BM (not self-tuned BM)          */
/*                                                                      */
/*      This routine is provided merely for reference/comparison.       */
/*                                                                      */
/*      It allows the Tuned Boyer-Moore algorithm to be used to         */
/*      perform fixed-string searches so that direct comparisons        */
/*      with behoffski's self-tuned version can be made.                */
/*      Otherwise, it's too hard to separate algorithm performance      */
/*      from the performance of the program control.                    */
/*                                                                      */
/*      The variant of the Tuned BM search implemented here is          */
/*      based on the version implemented by GNU Grep.  In               */
/*      particular, the static guard is always the second-to-last       */
/*      character of the string.                                        */
/*                                                                      */
/************************************************************************/
int
STBM_SearchTBM(STBM_SearchSpec *pSpec, 
            CHAR *pBuffer, UINT BufferLength, CHAR **match);


/************************************************************************/
/*                                                                      */
/*      GetPattern -- Retrieve originally-supplied pattern pointer      */
/*                                                                      */
/*      In many cases, the client may malloc the text, and then hand    */
/*      the text to STBM to be compiled.  It's possible to have a       */
/*      memory leak if the pattern is destroyed without freeing         */
/*      the text.  However, it's mighty inconvenient to carry around    */
/*      the text pointer in parallel to the STBM version, especially    */
/*      as STBM stores the pointer anyway.                              */
/*                                                                      */
/*      So this function allows the client to retrieve the text         */
/*      pointer stored by STBM so that the memory may be freed.         */
/*                                                                      */
/************************************************************************/
void
STBM_GetPattern(STBM_SearchSpec *pSpec, CHAR **ppPatternText);


/************************************************************************/
/*                                                                      */
/*      Destroy -- Get rid of optimised search spec                     */
/*                                                                      */
/*      Discards the resources acquired when the search pattern         */
/*      was compiled.  Note the text containing the original            */
/*      pattern might need freeing also; this is not done here.         */
/*      See GetPattern if you need to recover the pointer for           */
/*      freeing.                                                        */
/*                                                                      */
/************************************************************************/
void
STBM_Destroy(STBM_SearchSpec *pSpec);


#ifdef __cplusplus
}
#endif /*__cplusplus*/

#endif /*STBM_H*/
